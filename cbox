#!/usr/bin/env bash
# cbox: run Claude Code in a Docker sandbox with open network + SSH agent
set -euo pipefail

VERSION="1.1.0"
IMAGE="cbox:latest"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/cbox"
DOCKERFILE="${CACHE_DIR}/Dockerfile"

# Enable verbose mode if requested
if [[ "${CBOX_VERBOSE:-0}" == "1" ]]; then
  set -x
  echo "cbox: Verbose mode enabled" >&2
fi

# Function to show help
show_help() {
  cat << EOF
cbox - Claude Code Docker sandbox tool v${VERSION}

Usage: cbox [OPTIONS] [DIRECTORY] [-- CLAUDE_ARGS...]

Options:
  -h, --help       Show this help message
  -v, --version    Display version information
  --verbose        Enable verbose debug output
  --shell          Open a shell instead of Claude
  --verify         Verify installation and exit

Environment Variables:
  CBOX_REBUILD=1   Force rebuild Docker image
  CBOX_VERBOSE=1   Enable verbose debug output

Examples:
  cbox                        # Run in current directory
  cbox ~/project              # Run in specific directory  
  cbox -- chat --model opus   # Pass arguments to Claude
  cbox --shell                # Open shell in container

For more information, see: https://github.com/yourusername/cbox
EOF
}

# Parse command line arguments
SHELL_MODE=0
VERIFY_MODE=0
WORKDIR="$PWD"

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--version)
      echo "cbox version ${VERSION}"
      exit 0
      ;;
    --verbose)
      set -x
      echo "cbox: Verbose mode enabled" >&2
      shift
      ;;
    --shell)
      SHELL_MODE=1
      shift
      ;;
    --verify)
      VERIFY_MODE=1
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "cbox: Unknown option: $1" >&2
      echo "Try 'cbox --help' for more information." >&2
      exit 1
      ;;
    *)
      # This is the directory argument
      WORKDIR="$1"
      shift
      # Check if next arg is "--" for Claude args
      if [[ $# -gt 0 && "$1" == "--" ]]; then
        shift
        break
      fi
      ;;
  esac
done

# Remaining arguments after -- are passed to Claude
CLAUDE_ARGS=("$@")

# --- sanity checks ---
if ! command -v docker >/dev/null 2>&1; then
  echo "cbox: Docker is required but not found in PATH." >&2
  echo "  Install Docker Desktop: https://docs.docker.com/get-docker/" >&2
  echo "  Verify installation: docker --version" >&2
  exit 1
fi

# Check if Docker daemon is running
if ! docker version >/dev/null 2>&1; then
  echo "cbox: Docker daemon is not running." >&2
  echo "  Start Docker Desktop or run: sudo systemctl start docker" >&2
  echo "  Verify Docker is running: docker version" >&2
  exit 1
fi

# Verify mode - just check installation
if [[ "$VERIFY_MODE" == "1" ]]; then
  echo "✓ cbox v${VERSION} installed successfully" >&2
  echo "✓ Docker is available and running" >&2
  if [[ -n "${SSH_AUTH_SOCK:-}" && -S "${SSH_AUTH_SOCK:-}" ]]; then
    echo "✓ SSH agent is running" >&2
  else
    echo "⚠ SSH agent not running (optional)" >&2
  fi
  if [[ -f "$HOME/.claude.json" ]]; then
    echo "✓ Claude authentication found" >&2
  else
    echo "⚠ Claude authentication not found (run 'claude login' on host)" >&2
  fi
  exit 0
fi

# Check SSH agent for non-shell mode
if [[ "$SHELL_MODE" == "0" ]]; then
  if [[ -z "${SSH_AUTH_SOCK:-}" ]]; then
    echo "cbox: SSH agent not detected." >&2
    echo "  Start SSH agent: eval \$(ssh-agent -s)" >&2
    echo "  Add your key: ssh-add ~/.ssh/id_rsa" >&2
    echo "  Verify loaded: ssh-add -l" >&2
    exit 1
  elif [[ ! -S "${SSH_AUTH_SOCK:-}" ]]; then
    echo "cbox: SSH agent socket not found at: ${SSH_AUTH_SOCK}" >&2
    echo "  The SSH_AUTH_SOCK variable points to a non-existent socket." >&2
    echo "  Try restarting your SSH agent: eval \$(ssh-agent -s)" >&2
    exit 1
  fi
fi

# Validate working directory
if [[ ! -d "$WORKDIR" ]]; then
  echo "cbox: Directory does not exist: $WORKDIR" >&2
  echo "  Please specify a valid directory or use current directory." >&2
  exit 1
fi

# Resolve to absolute path
WORKDIR="$(cd "$WORKDIR" && pwd)" || {
  echo "cbox: Cannot access directory: $WORKDIR" >&2
  exit 1
}

mkdir -p "$CACHE_DIR"

# --- minimal image with Claude Code CLI ---
if [[ ! -f "$DOCKERFILE" ]]; then
  cat >"$DOCKERFILE" <<'EOF'
FROM node:20-bookworm-slim
RUN apt-get update && apt-get install -y --no-install-recommends \
    git openssh-client ca-certificates tini bash less && \
    rm -rf /var/lib/apt/lists/*
RUN npm i -g @anthropic-ai/claude-code@latest
# Create an entrypoint script that sets up the user properly
RUN echo '#!/bin/bash\n\
if [ -n "$HOST_UID" ] && [ -n "$HOST_GID" ]; then\n\
  groupadd -g $HOST_GID host 2>/dev/null || true\n\
  useradd -u $HOST_UID -g $HOST_GID -d /home/host -s /bin/bash host 2>/dev/null || true\n\
  chown -R $HOST_UID:$HOST_GID /home/host 2>/dev/null || true\n\
  exec gosu host "$@"\n\
else\n\
  exec "$@"\n\
fi' > /entrypoint.sh && chmod +x /entrypoint.sh
# Install gosu for proper user switching
RUN apt-get update && apt-get install -y gosu && rm -rf /var/lib/apt/lists/*
# Create home directory
RUN mkdir -p /home/host/.ssh && chmod 755 /home/host
ENV SHELL=/bin/bash
WORKDIR /work
ENTRYPOINT ["/usr/bin/tini", "--", "/entrypoint.sh"]
EOF
fi

# Build image if missing or CBOX_REBUILD=1
if ! docker image inspect "$IMAGE" >/dev/null 2>&1 || [[ "${CBOX_REBUILD:-0}" == "1" ]]; then
  DOCKER_BUILDKIT=1 docker build -t "$IMAGE" -f "$DOCKERFILE" "$CACHE_DIR"
fi

# Ensure .claude directory exists
mkdir -p "$HOME/.claude"

# Check if .claude.json exists (contains auth token)
if [[ ! -f "$HOME/.claude.json" ]]; then
  echo "Warning: No Claude authentication found at ~/.claude.json" >&2
  echo "You'll need to log in when Claude starts." >&2
fi

# Volume mounts (only if sources exist)
vols=(-v "$WORKDIR":/work
      -v "$SSH_AUTH_SOCK":/ssh-agent
      -v "$HOME/.claude":/home/host/.claude)

# Also mount the main .claude.json file if it exists
[[ -f "$HOME/.claude.json" ]] && vols+=(-v "$HOME/.claude.json":/home/host/.claude.json)
[[ -f "$HOME/.gitconfig" ]] && vols+=(-v "$HOME/.gitconfig":/home/host/.gitconfig:ro)
[[ -f "$HOME/.ssh/known_hosts" ]] && vols+=(-v "$HOME/.ssh/known_hosts":/home/host/.ssh/known_hosts:ro)
[[ -f "$HOME/.git-credentials" ]] && vols+=(-v "$HOME/.git-credentials":/home/host/.git-credentials:ro)

# Set up command to run
if [[ "$SHELL_MODE" == "1" ]]; then
  # Shell mode - open bash instead of Claude
  CONTAINER_CMD=("/bin/bash")
  echo "cbox: Opening shell in container (type 'exit' to leave)" >&2
else
  # Normal mode - run Claude with args
  CONTAINER_CMD=("claude" "--dangerously-skip-permissions")
  if [[ ${#CLAUDE_ARGS[@]} -gt 0 ]]; then
    CONTAINER_CMD+=("${CLAUDE_ARGS[@]}")
  fi
fi

# Detect if we have a TTY
TTY_FLAGS=""
if [ -t 0 ] && [ -t 1 ]; then
  TTY_FLAGS="-it"
fi

# Show what we're doing in verbose mode
if [[ "${CBOX_VERBOSE:-0}" == "1" ]]; then
  echo "cbox: Running container with command: ${CONTAINER_CMD[*]}" >&2
  echo "cbox: Working directory: $WORKDIR" >&2
  echo "cbox: Volume mounts: ${#vols[@]} volumes" >&2
fi

exec docker run --rm $TTY_FLAGS \
  -e HOME=/home/host \
  -e USER=host \
  -e TERM="${TERM:-xterm-256color}" \
  -e SSH_AUTH_SOCK=/ssh-agent \
  -e HOST_UID="$(id -u)" \
  -e HOST_GID="$(id -g)" \
  -w /work \
  "${vols[@]}" \
  "$IMAGE" "${CONTAINER_CMD[@]}"